[{"C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\index.js":"1","C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\App.js":"2","C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\utils\\API.js":"3","C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\EmployeeListContainer\\index.js.js":"4","C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\ResultList\\index.js.js":"5","C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\Filter\\index.js":"6","C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\Jumbotron\\index.js":"7"},{"size":243,"mtime":1612664011912,"results":"8","hashOfConfig":"9"},{"size":205,"mtime":1612662091296,"results":"10","hashOfConfig":"9"},{"size":135,"mtime":1612641467740,"results":"11","hashOfConfig":"9"},{"size":807,"mtime":1612665581985,"results":"12","hashOfConfig":"9"},{"size":4859,"mtime":1612665425760,"results":"13","hashOfConfig":"9"},{"size":1002,"mtime":1612665006034,"results":"14","hashOfConfig":"9"},{"size":353,"mtime":1612664177656,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"792b9o",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\index.js",[],"C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\App.js",[],"C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\utils\\API.js",[],["32","33"],"C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\EmployeeListContainer\\index.js.js",[],"C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\ResultList\\index.js.js",["34"],"import React, { useState, useEffect } from \"react\";\r\n\r\n// Setting <employee> Data to <sorted> State\r\nconst ResultList = ({ employees }) => {\r\n  const [sorted, setSorted] = useState([]);\r\n  useEffect(() => setSorted(employees), [employees]);\r\n\r\n  // Render/Return\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <br />\r\n          <h6 scope=\"col-12\" >\r\n            Sort by First, Last, Gender, City, or State by clicking on the headings\r\n          </h6>\r\n      <table className=\"table table-striped\">\r\n        <thead className=\"table-header\">\r\n          <tr>\r\n            {/* Table Headings */} \r\n            <th scope=\"col\"> </th>\r\n            <th scope=\"col\"> Title </th>\r\n            {/* Table heading - Sort by First Name */}\r\n            <th\r\n              scope=\"col\"\r\n              onClick={() => {\r\n                const employeeData = [...employees];\r\n                const updateSort = employeeData.sort((a, b) => {\r\n                  const A = a.name.first;\r\n                  const B = b.name.first;\r\n                  if (A < B) {\r\n                    return -1;\r\n                  }\r\n                  if (A > B) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                });\r\n                setSorted(updateSort);\r\n              }}\r\n            >First</th> \r\n            <th scope=\"col\" onClick={() => {\r\n                const employeeData = [...employees];\r\n                const updateSort = employeeData.sort((a, b) => {\r\n                  const A = a.name.last;\r\n                  const B = b.name.last;\r\n                  if (A < B) {\r\n                    return -1;\r\n                  }\r\n                  if (A > B) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                });\r\n                setSorted(updateSort);\r\n              }}> Last </th>\r\n            <th scope=\"col\" onClick={() => {\r\n                const employeeData = [...employees];\r\n                const updateSort = employeeData.sort((a, b) => {\r\n                  const A = a.gender;\r\n                  const B = b.gender;\r\n                  if (A < B) {\r\n                    return -1;\r\n                  }\r\n                  else if (A > B) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                });\r\n                  setSorted(updateSort);\r\n                }}> Gender </th> \r\n            <th scope=\"col\"> Cell Phone </th>\r\n            <th scope=\"col\"> Landline </th> \r\n            <th scope=\"col\"> Email </th>\r\n            <th scope=\"col\" onClick={() => {\r\n                const employeeData = [...employees];\r\n                const updateSort = employeeData.sort((a, b) => {\r\n                  const A = a.location.city;\r\n                  const B = b.location.city;\r\n                  if (A < B) {\r\n                    return -1;\r\n                  }\r\n                  else if (A > B) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                });\r\n                  setSorted(updateSort);\r\n                }}> City </th> \r\n            <th scope=\"col\" onClick={() => {\r\n                const employeeData = [...employees];\r\n                const updateSort = employeeData.sort((a, b) => {\r\n                  const A = a.location.state;\r\n                  const B = b.location.state;\r\n                  if (A < B) {\r\n                    return -1;\r\n                  }\r\n                  else if (A > B) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                });\r\n                  setSorted(updateSort);\r\n                }}> State </th>\r\n            <th scope=\"col\"> Country </th> \r\n            <th scope=\"col\"> Zip </th>\r\n          </tr>\r\n        </thead>\r\n\r\n        {/* Mapping Incoming Data */}\r\n        <tbody className=\"table-data\">\r\n          {sorted.map(\r\n            ({\r\n              location: { city, state, country, postcode },\r\n              picture: { thumbnail },\r\n              cell,\r\n              phone,\r\n              gender,\r\n              email,\r\n              name: { first, last, title },\r\n            }) => (\r\n\r\n              // Inserting Table Data\r\n              <tr key={email}>\r\n                <td>\r\n                  <img alt=\"Employee images\" src={thumbnail} />\r\n                </td>\r\n                <td> {title} </td> \r\n                <td> {first} </td> \r\n                <td> {last} </td>\r\n                <td> {gender} </td> \r\n                <td> {cell} </td> \r\n                <td> {phone} </td>\r\n                <td> {email} </td> \r\n                <td> {city} </td> \r\n                <td> {state} </td>\r\n                <td> {country} </td> \r\n                <td> {postcode} </td> \r\n              </tr>\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultList;\r\n","C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\Filter\\index.js",[],"C:\\Users\\sambi\\Documents\\MSU Coding Bootcamp\\Homework\\react-employee-directory\\src\\components\\Jumbotron\\index.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":12,"column":15,"nodeType":"41","endLine":12,"endColumn":29},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","no-global-assign","no-unsafe-negation"]